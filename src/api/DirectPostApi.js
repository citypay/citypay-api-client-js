/**
 * CityPay Payment API
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthResponse from '../model/AuthResponse';
import DirectPostRequest from '../model/DirectPostRequest';
import DirectTokenAuthRequest from '../model/DirectTokenAuthRequest';
import Error from '../model/Error';
import TokenisationResponseModel from '../model/TokenisationResponseModel';

/**
* DirectPostApi service.
* @module api/DirectPostApi
*/
export default class DirectPostApi {

    /**
    * Constructs a new DirectPostApi. 
    * @alias module:api/DirectPostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Handles a CRes response from ACS, returning back the result of authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
     * @param {String} uuid An identifier used to track the CReq/CRes cycle.
     * @param {Object} opts Optional parameters
     * @param {String} [cres] The CRES from the ACS.
     * @param {String} [three_ds_session_data] The session data from the ACS.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthResponse} and HTTP response
     */
    directCResAuthRequestWithHttpInfo(uuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling directCResAuthRequest");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'cres': opts['cres'],
        'threeDSSessionData': opts['three_ds_session_data']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let returnType = AuthResponse;
      return this.apiClient.callApi(
        '/direct/cres/auth/{uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
     * @param {String} uuid An identifier used to track the CReq/CRes cycle.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cres The CRES from the ACS.
     * @param {String} opts.three_ds_session_data The session data from the ACS.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthResponse}
     */
    directCResAuthRequest(uuid, opts) {
      return this.directCResAuthRequestWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
     * @param {String} uuid An identifier used to track the CReq/CRes cycle.
     * @param {Object} opts Optional parameters
     * @param {String} [cres] The CRES from the ACS.
     * @param {String} [three_ds_session_data] The session data from the ACS.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenisationResponseModel} and HTTP response
     */
    directCResTokeniseRequestWithHttpInfo(uuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling directCResTokeniseRequest");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'cres': opts['cres'],
        'threeDSSessionData': opts['three_ds_session_data']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let returnType = TokenisationResponseModel;
      return this.apiClient.callApi(
        '/direct/cres/tokenise/{uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
     * @param {String} uuid An identifier used to track the CReq/CRes cycle.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cres The CRES from the ACS.
     * @param {String} opts.three_ds_session_data The session data from the ACS.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenisationResponseModel}
     */
    directCResTokeniseRequest(uuid, opts) {
      return this.directCResTokeniseRequestWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Direct Post Auth Request
     * Used to initiate a direct post request transaction flow.  <pre class=\"inline-code language-bash\"> <code> curl https://api.citypay.com/direct/auth?cp-domain-key=n834ytqp84y... \\  -d \"amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW </code> </pre>. 
     * @param {module:model/DirectPostRequest} direct_post_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthResponse} and HTTP response
     */
    directPostAuthRequestWithHttpInfo(direct_post_request) {
      let postBody = direct_post_request;
      // verify the required parameter 'direct_post_request' is set
      if (direct_post_request === undefined || direct_post_request === null) {
        throw new Error("Missing the required parameter 'direct_post_request' when calling directPostAuthRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-domain-key', 'cp-api-key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'];
      let returnType = AuthResponse;
      return this.apiClient.callApi(
        '/direct/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Direct Post Auth Request
     * Used to initiate a direct post request transaction flow.  <pre class=\"inline-code language-bash\"> <code> curl https://api.citypay.com/direct/auth?cp-domain-key=n834ytqp84y... \\  -d \"amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW </code> </pre>. 
     * @param {module:model/DirectPostRequest} direct_post_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthResponse}
     */
    directPostAuthRequest(direct_post_request) {
      return this.directPostAuthRequestWithHttpInfo(direct_post_request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Direct Post Tokenise Request
     * Used to initiate a direct post request transaction flow.  <pre class=\"inline-code language-bash\"> <code> curl https://api.citypay.com/v6/direct?cp-domain-key=n834ytqp84y... \\  -d \"amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW </code> </pre>. 
     * @param {module:model/DirectPostRequest} direct_post_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthResponse} and HTTP response
     */
    directPostTokeniseRequestWithHttpInfo(direct_post_request) {
      let postBody = direct_post_request;
      // verify the required parameter 'direct_post_request' is set
      if (direct_post_request === undefined || direct_post_request === null) {
        throw new Error("Missing the required parameter 'direct_post_request' when calling directPostTokeniseRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-domain-key', 'cp-api-key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'];
      let returnType = AuthResponse;
      return this.apiClient.callApi(
        '/direct/tokenise', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Direct Post Tokenise Request
     * Used to initiate a direct post request transaction flow.  <pre class=\"inline-code language-bash\"> <code> curl https://api.citypay.com/v6/direct?cp-domain-key=n834ytqp84y... \\  -d \"amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW </code> </pre>. 
     * @param {module:model/DirectPostRequest} direct_post_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthResponse}
     */
    directPostTokeniseRequest(direct_post_request) {
      return this.directPostTokeniseRequestWithHttpInfo(direct_post_request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Direct Post Token Request
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param {module:model/DirectTokenAuthRequest} direct_token_auth_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthResponse} and HTTP response
     */
    tokenRequestWithHttpInfo(direct_token_auth_request) {
      let postBody = direct_token_auth_request;
      // verify the required parameter 'direct_token_auth_request' is set
      if (direct_token_auth_request === undefined || direct_token_auth_request === null) {
        throw new Error("Missing the required parameter 'direct_token_auth_request' when calling tokenRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-domain-key', 'cp-api-key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'];
      let returnType = AuthResponse;
      return this.apiClient.callApi(
        '/direct/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Direct Post Token Request
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param {module:model/DirectTokenAuthRequest} direct_token_auth_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthResponse}
     */
    tokenRequest(direct_token_auth_request) {
      return this.tokenRequestWithHttpInfo(direct_token_auth_request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
