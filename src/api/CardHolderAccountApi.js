/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCreate from '../model/AccountCreate';
import AccountStatus from '../model/AccountStatus';
import Acknowledgement from '../model/Acknowledgement';
import CardHolderAccount from '../model/CardHolderAccount';
import CardStatus from '../model/CardStatus';
import ChargeRequest from '../model/ChargeRequest';
import ContactDetails from '../model/ContactDetails';
import Decision from '../model/Decision';
import Error from '../model/Error';
import Exists from '../model/Exists';
import RegisterCard from '../model/RegisterCard';

/**
* CardHolderAccountApi service.
* @module api/CardHolderAccountApi
*/
export default class CardHolderAccountApi {

    /**
    * Constructs a new CardHolderAccountApi. 
    * @alias module:api/CardHolderAccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Card Deletion
     * Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {String} card_id The id of the card that is presented by a call to retrieve a card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Acknowledgement} and HTTP response
     */
    accountCardDeleteRequestWithHttpInfo(accountid, card_id) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountCardDeleteRequest");
      }
      // verify the required parameter 'card_id' is set
      if (card_id === undefined || card_id === null) {
        throw new Error("Missing the required parameter 'card_id' when calling accountCardDeleteRequest");
      }

      let pathParams = {
        'accountid': accountid,
        'cardId': card_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Acknowledgement;
      return this.apiClient.callApi(
        '/v6/account/{accountid}/card/{cardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Card Deletion
     * Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {String} card_id The id of the card that is presented by a call to retrieve a card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Acknowledgement}
     */
    accountCardDeleteRequest(accountid, card_id) {
      return this.accountCardDeleteRequestWithHttpInfo(accountid, card_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Card Registration
     * Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {module:model/RegisterCard} register_card 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardHolderAccount} and HTTP response
     */
    accountCardRegisterRequestWithHttpInfo(accountid, register_card) {
      let postBody = register_card;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountCardRegisterRequest");
      }
      // verify the required parameter 'register_card' is set
      if (register_card === undefined || register_card === null) {
        throw new Error("Missing the required parameter 'register_card' when calling accountCardRegisterRequest");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = ['application/json', 'text/xml'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = CardHolderAccount;
      return this.apiClient.callApi(
        '/v6/account/{accountid}/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Card Registration
     * Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {module:model/RegisterCard} register_card 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardHolderAccount}
     */
    accountCardRegisterRequest(accountid, register_card) {
      return this.accountCardRegisterRequestWithHttpInfo(accountid, register_card)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Card Status
     * Updates the status of a card for processing. The following values are available  | Status | Description |  |--------|-------------| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {String} card_id The id of the card that is presented by a call to retrieve a card holder account.
     * @param {module:model/CardStatus} card_status 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Acknowledgement} and HTTP response
     */
    accountCardStatusRequestWithHttpInfo(accountid, card_id, card_status) {
      let postBody = card_status;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountCardStatusRequest");
      }
      // verify the required parameter 'card_id' is set
      if (card_id === undefined || card_id === null) {
        throw new Error("Missing the required parameter 'card_id' when calling accountCardStatusRequest");
      }
      // verify the required parameter 'card_status' is set
      if (card_status === undefined || card_status === null) {
        throw new Error("Missing the required parameter 'card_status' when calling accountCardStatusRequest");
      }

      let pathParams = {
        'accountid': accountid,
        'cardId': card_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = ['application/json', 'text/xml'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Acknowledgement;
      return this.apiClient.callApi(
        '/v6/account/{accountid}/card/{cardId}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Card Status
     * Updates the status of a card for processing. The following values are available  | Status | Description |  |--------|-------------| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {String} card_id The id of the card that is presented by a call to retrieve a card holder account.
     * @param {module:model/CardStatus} card_status 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Acknowledgement}
     */
    accountCardStatusRequest(accountid, card_id, card_status) {
      return this.accountCardStatusRequestWithHttpInfo(accountid, card_id, card_status)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Contact Details Update
     * Allows for the ability to change the contact details for an account.
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {module:model/ContactDetails} contact_details 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardHolderAccount} and HTTP response
     */
    accountChangeContactRequestWithHttpInfo(accountid, contact_details) {
      let postBody = contact_details;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountChangeContactRequest");
      }
      // verify the required parameter 'contact_details' is set
      if (contact_details === undefined || contact_details === null) {
        throw new Error("Missing the required parameter 'contact_details' when calling accountChangeContactRequest");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = ['application/json', 'text/xml'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = CardHolderAccount;
      return this.apiClient.callApi(
        '/v6/account/{accountid}/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Contact Details Update
     * Allows for the ability to change the contact details for an account.
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {module:model/ContactDetails} contact_details 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardHolderAccount}
     */
    accountChangeContactRequest(accountid, contact_details) {
      return this.accountChangeContactRequestWithHttpInfo(accountid, contact_details)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Account Create
     * Creates a new card holder account and initialises the account ready for adding cards.
     * @param {module:model/AccountCreate} account_create 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardHolderAccount} and HTTP response
     */
    accountCreateWithHttpInfo(account_create) {
      let postBody = account_create;
      // verify the required parameter 'account_create' is set
      if (account_create === undefined || account_create === null) {
        throw new Error("Missing the required parameter 'account_create' when calling accountCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = ['application/json', 'text/xml'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = CardHolderAccount;
      return this.apiClient.callApi(
        '/v6/account/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Account Create
     * Creates a new card holder account and initialises the account ready for adding cards.
     * @param {module:model/AccountCreate} account_create 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardHolderAccount}
     */
    accountCreate(account_create) {
      return this.accountCreateWithHttpInfo(account_create)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Account Deletion
     * Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Acknowledgement} and HTTP response
     */
    accountDeleteRequestWithHttpInfo(accountid) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountDeleteRequest");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Acknowledgement;
      return this.apiClient.callApi(
        '/v6/account/{accountid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Account Deletion
     * Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Acknowledgement}
     */
    accountDeleteRequest(accountid) {
      return this.accountDeleteRequestWithHttpInfo(accountid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Account Exists
     * Checks that an account exists and is active by providing the account id as a url parameter. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Exists} and HTTP response
     */
    accountExistsRequestWithHttpInfo(accountid) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountExistsRequest");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Exists;
      return this.apiClient.callApi(
        '/v6/account-exists/{accountid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Account Exists
     * Checks that an account exists and is active by providing the account id as a url parameter. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Exists}
     */
    accountExistsRequest(accountid) {
      return this.accountExistsRequestWithHttpInfo(accountid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Account Retrieval
     * Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist for the same `id`, the first account created with that `id` will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardHolderAccount} and HTTP response
     */
    accountRetrieveRequestWithHttpInfo(accountid) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountRetrieveRequest");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = CardHolderAccount;
      return this.apiClient.callApi(
        '/v6/account/{accountid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Account Retrieval
     * Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist for the same `id`, the first account created with that `id` will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardHolderAccount}
     */
    accountRetrieveRequest(accountid) {
      return this.accountRetrieveRequestWithHttpInfo(accountid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Account Status
     * Updates the status of an account. An account can have the following statuses applied  | Status | Description | |--------|-------------| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {module:model/AccountStatus} account_status 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Acknowledgement} and HTTP response
     */
    accountStatusRequestWithHttpInfo(accountid, account_status) {
      let postBody = account_status;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling accountStatusRequest");
      }
      // verify the required parameter 'account_status' is set
      if (account_status === undefined || account_status === null) {
        throw new Error("Missing the required parameter 'account_status' when calling accountStatusRequest");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = ['application/json', 'text/xml'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Acknowledgement;
      return this.apiClient.callApi(
        '/v6/account/{accountid}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Account Status
     * Updates the status of an account. An account can have the following statuses applied  | Status | Description | |--------|-------------| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
     * @param {String} accountid The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
     * @param {module:model/AccountStatus} account_status 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Acknowledgement}
     */
    accountStatusRequest(accountid, account_status) {
      return this.accountStatusRequestWithHttpInfo(accountid, account_status)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Charge
     * A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling `/account-register-card` with the card details  or retrieved using `/account-retrieve`  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage    _Should an account be used with 3DSv2, the card holder name should also be stored alongside the card as this is a required field with both Visa and MasterCard for risk analysis._. 
     * @param {module:model/ChargeRequest} charge_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Decision} and HTTP response
     */
    chargeRequestWithHttpInfo(charge_request) {
      let postBody = charge_request;
      // verify the required parameter 'charge_request' is set
      if (charge_request === undefined || charge_request === null) {
        throw new Error("Missing the required parameter 'charge_request' when calling chargeRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cp-api-key'];
      let contentTypes = ['application/json', 'text/xml'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Decision;
      return this.apiClient.callApi(
        '/v6/charge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Charge
     * A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling `/account-register-card` with the card details  or retrieved using `/account-retrieve`  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage    _Should an account be used with 3DSv2, the card holder name should also be stored alongside the card as this is a required field with both Visa and MasterCard for risk analysis._. 
     * @param {module:model/ChargeRequest} charge_request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Decision}
     */
    chargeRequest(charge_request) {
      return this.chargeRequestWithHttpInfo(charge_request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
