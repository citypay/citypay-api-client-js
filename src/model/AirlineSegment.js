/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AirlineSegment model module.
 * @module model/AirlineSegment
 */
class AirlineSegment {
    /**
     * Constructs a new <code>AirlineSegment</code>.
     * @alias module:model/AirlineSegment
     * @param arrival_location_code {String} A standard airline routing code (airport code or location identifier) applicable to the arrival portion of this segment. 
     * @param carrier_code {String} This field contains the two character airline designator code (air carrier code or airline code) that corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary. 
     * @param class_service_code {String} This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.) within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment, as specified in the IATA Standard Code allocation table. 
     * @param departure_date {Date} The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).
     * @param flight_number {String} This field contains the carrier-assigned Flight Number for this travel segment.
     */
    constructor(arrival_location_code, carrier_code, class_service_code, departure_date, flight_number) { 
        
        AirlineSegment.initialize(this, arrival_location_code, carrier_code, class_service_code, departure_date, flight_number);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arrival_location_code, carrier_code, class_service_code, departure_date, flight_number) { 
        obj['arrival_location_code'] = arrival_location_code;
        obj['carrier_code'] = carrier_code;
        obj['class_service_code'] = class_service_code;
        obj['departure_date'] = departure_date;
        obj['flight_number'] = flight_number;
    }

    /**
     * Constructs a <code>AirlineSegment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirlineSegment} obj Optional instance to populate.
     * @return {module:model/AirlineSegment} The populated <code>AirlineSegment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirlineSegment();

            if (data.hasOwnProperty('arrival_location_code')) {
                obj['arrival_location_code'] = ApiClient.convertToType(data['arrival_location_code'], 'String');
            }
            if (data.hasOwnProperty('carrier_code')) {
                obj['carrier_code'] = ApiClient.convertToType(data['carrier_code'], 'String');
            }
            if (data.hasOwnProperty('class_service_code')) {
                obj['class_service_code'] = ApiClient.convertToType(data['class_service_code'], 'String');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('flight_number')) {
                obj['flight_number'] = ApiClient.convertToType(data['flight_number'], 'String');
            }
            if (data.hasOwnProperty('departure_location_code')) {
                obj['departure_location_code'] = ApiClient.convertToType(data['departure_location_code'], 'String');
            }
            if (data.hasOwnProperty('segment_fare')) {
                obj['segment_fare'] = ApiClient.convertToType(data['segment_fare'], 'Number');
            }
            if (data.hasOwnProperty('stop_over_indicator')) {
                obj['stop_over_indicator'] = ApiClient.convertToType(data['stop_over_indicator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirlineSegment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirlineSegment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AirlineSegment.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['arrival_location_code'] && !(typeof data['arrival_location_code'] === 'string' || data['arrival_location_code'] instanceof String)) {
            throw new Error("Expected the field `arrival_location_code` to be a primitive type in the JSON string but got " + data['arrival_location_code']);
        }
        // ensure the json data is a string
        if (data['carrier_code'] && !(typeof data['carrier_code'] === 'string' || data['carrier_code'] instanceof String)) {
            throw new Error("Expected the field `carrier_code` to be a primitive type in the JSON string but got " + data['carrier_code']);
        }
        // ensure the json data is a string
        if (data['class_service_code'] && !(typeof data['class_service_code'] === 'string' || data['class_service_code'] instanceof String)) {
            throw new Error("Expected the field `class_service_code` to be a primitive type in the JSON string but got " + data['class_service_code']);
        }
        // ensure the json data is a string
        if (data['flight_number'] && !(typeof data['flight_number'] === 'string' || data['flight_number'] instanceof String)) {
            throw new Error("Expected the field `flight_number` to be a primitive type in the JSON string but got " + data['flight_number']);
        }
        // ensure the json data is a string
        if (data['departure_location_code'] && !(typeof data['departure_location_code'] === 'string' || data['departure_location_code'] instanceof String)) {
            throw new Error("Expected the field `departure_location_code` to be a primitive type in the JSON string but got " + data['departure_location_code']);
        }
        // ensure the json data is a string
        if (data['stop_over_indicator'] && !(typeof data['stop_over_indicator'] === 'string' || data['stop_over_indicator'] instanceof String)) {
            throw new Error("Expected the field `stop_over_indicator` to be a primitive type in the JSON string but got " + data['stop_over_indicator']);
        }

        return true;
    }


}

AirlineSegment.RequiredProperties = ["arrival_location_code", "carrier_code", "class_service_code", "departure_date", "flight_number"];

/**
 * A standard airline routing code (airport code or location identifier) applicable to the arrival portion of this segment. 
 * @member {String} arrival_location_code
 */
AirlineSegment.prototype['arrival_location_code'] = undefined;

/**
 * This field contains the two character airline designator code (air carrier code or airline code) that corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary. 
 * @member {String} carrier_code
 */
AirlineSegment.prototype['carrier_code'] = undefined;

/**
 * This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.) within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment, as specified in the IATA Standard Code allocation table. 
 * @member {String} class_service_code
 */
AirlineSegment.prototype['class_service_code'] = undefined;

/**
 * The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).
 * @member {Date} departure_date
 */
AirlineSegment.prototype['departure_date'] = undefined;

/**
 * This field contains the carrier-assigned Flight Number for this travel segment.
 * @member {String} flight_number
 */
AirlineSegment.prototype['flight_number'] = undefined;

/**
 * A standard airline routing code (airport code or location identifier) applicable to the departure portion of this segment. 
 * @member {String} departure_location_code
 */
AirlineSegment.prototype['departure_location_code'] = undefined;

/**
 * This field contains the total Fare for this travel segment.
 * @member {Number} segment_fare
 */
AirlineSegment.prototype['segment_fare'] = undefined;

/**
 * O = Stopover allowed, X = Stopover not allowed.
 * @member {String} stop_over_indicator
 */
AirlineSegment.prototype['stop_over_indicator'] = undefined;






export default AirlineSegment;

