/**
 * CityPay Payment API
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MCC6012 model module.
 * @module model/MCC6012
 */
class MCC6012 {
    /**
     * Constructs a new <code>MCC6012</code>.
     * @alias module:model/MCC6012
     */
    constructor() { 
        
        MCC6012.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MCC6012</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MCC6012} obj Optional instance to populate.
     * @return {module:model/MCC6012} The populated <code>MCC6012</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MCC6012();

            if (data.hasOwnProperty('recipient_account')) {
                obj['recipient_account'] = ApiClient.convertToType(data['recipient_account'], 'String');
            }
            if (data.hasOwnProperty('recipient_dob')) {
                obj['recipient_dob'] = ApiClient.convertToType(data['recipient_dob'], 'String');
            }
            if (data.hasOwnProperty('recipient_lastname')) {
                obj['recipient_lastname'] = ApiClient.convertToType(data['recipient_lastname'], 'String');
            }
            if (data.hasOwnProperty('recipient_postcode')) {
                obj['recipient_postcode'] = ApiClient.convertToType(data['recipient_postcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MCC6012</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MCC6012</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recipient_account'] && !(typeof data['recipient_account'] === 'string' || data['recipient_account'] instanceof String)) {
            throw new Error("Expected the field `recipient_account` to be a primitive type in the JSON string but got " + data['recipient_account']);
        }
        // ensure the json data is a string
        if (data['recipient_dob'] && !(typeof data['recipient_dob'] === 'string' || data['recipient_dob'] instanceof String)) {
            throw new Error("Expected the field `recipient_dob` to be a primitive type in the JSON string but got " + data['recipient_dob']);
        }
        // ensure the json data is a string
        if (data['recipient_lastname'] && !(typeof data['recipient_lastname'] === 'string' || data['recipient_lastname'] instanceof String)) {
            throw new Error("Expected the field `recipient_lastname` to be a primitive type in the JSON string but got " + data['recipient_lastname']);
        }
        // ensure the json data is a string
        if (data['recipient_postcode'] && !(typeof data['recipient_postcode'] === 'string' || data['recipient_postcode'] instanceof String)) {
            throw new Error("Expected the field `recipient_postcode` to be a primitive type in the JSON string but got " + data['recipient_postcode']);
        }

        return true;
    }


}



/**
 * The account number of the recipient.
 * @member {String} recipient_account
 */
MCC6012.prototype['recipient_account'] = undefined;

/**
 * The date of birth of the recipient.
 * @member {String} recipient_dob
 */
MCC6012.prototype['recipient_dob'] = undefined;

/**
 * The lastname of ther recepient.
 * @member {String} recipient_lastname
 */
MCC6012.prototype['recipient_lastname'] = undefined;

/**
 * The postcode of the recipient.
 * @member {String} recipient_postcode
 */
MCC6012.prototype['recipient_postcode'] = undefined;






export default MCC6012;

