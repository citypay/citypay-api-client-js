/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaylinkAttachmentResult from './PaylinkAttachmentResult';
import PaylinkErrorCode from './PaylinkErrorCode';

/**
 * The PaylinkTokenCreated model module.
 * @module model/PaylinkTokenCreated
 */
class PaylinkTokenCreated {
    /**
     * Constructs a new <code>PaylinkTokenCreated</code>.
     * @alias module:model/PaylinkTokenCreated
     * @param id {String} A unique id of the request.
     * @param result {Number} The result field contains the result for the Paylink Token Request. 0 - indicates that an error was encountered while creating the token. 1 - which indicates that a Token was successfully created.
     * @param token {String} A token generated for the request used to refer to the transaction in consequential calls.
     */
    constructor(id, result, token) { 
        
        PaylinkTokenCreated.initialize(this, id, result, token);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, result, token) { 
        obj['id'] = id;
        obj['result'] = result;
        obj['token'] = token;
    }

    /**
     * Constructs a <code>PaylinkTokenCreated</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaylinkTokenCreated} obj Optional instance to populate.
     * @return {module:model/PaylinkTokenCreated} The populated <code>PaylinkTokenCreated</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaylinkTokenCreated();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'Number');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = PaylinkAttachmentResult.constructFromObject(data['attachments']);
            }
            if (data.hasOwnProperty('bps')) {
                obj['bps'] = ApiClient.convertToType(data['bps'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [PaylinkErrorCode]);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('qrcode')) {
                obj['qrcode'] = ApiClient.convertToType(data['qrcode'], 'String');
            }
            if (data.hasOwnProperty('server_version')) {
                obj['server_version'] = ApiClient.convertToType(data['server_version'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('usc')) {
                obj['usc'] = ApiClient.convertToType(data['usc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaylinkTokenCreated</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaylinkTokenCreated</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaylinkTokenCreated.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // validate the optional field `attachments`
        if (data['attachments']) { // data not null
          PaylinkAttachmentResult.validateJSON(data['attachments']);
        }
        // ensure the json data is a string
        if (data['bps'] && !(typeof data['bps'] === 'string' || data['bps'] instanceof String)) {
            throw new Error("Expected the field `bps` to be a primitive type in the JSON string but got " + data['bps']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                PaylinkErrorCode.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['qrcode'] && !(typeof data['qrcode'] === 'string' || data['qrcode'] instanceof String)) {
            throw new Error("Expected the field `qrcode` to be a primitive type in the JSON string but got " + data['qrcode']);
        }
        // ensure the json data is a string
        if (data['server_version'] && !(typeof data['server_version'] === 'string' || data['server_version'] instanceof String)) {
            throw new Error("Expected the field `server_version` to be a primitive type in the JSON string but got " + data['server_version']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['usc'] && !(typeof data['usc'] === 'string' || data['usc'] instanceof String)) {
            throw new Error("Expected the field `usc` to be a primitive type in the JSON string but got " + data['usc']);
        }

        return true;
    }


}

PaylinkTokenCreated.RequiredProperties = ["id", "result", "token"];

/**
 * A unique id of the request.
 * @member {String} id
 */
PaylinkTokenCreated.prototype['id'] = undefined;

/**
 * The result field contains the result for the Paylink Token Request. 0 - indicates that an error was encountered while creating the token. 1 - which indicates that a Token was successfully created.
 * @member {Number} result
 */
PaylinkTokenCreated.prototype['result'] = undefined;

/**
 * A token generated for the request used to refer to the transaction in consequential calls.
 * @member {String} token
 */
PaylinkTokenCreated.prototype['token'] = undefined;

/**
 * @member {module:model/PaylinkAttachmentResult} attachments
 */
PaylinkTokenCreated.prototype['attachments'] = undefined;

/**
 * true if BPS has been enabled on this token.
 * @member {String} bps
 */
PaylinkTokenCreated.prototype['bps'] = undefined;

/**
 * Date and time the token was generated.
 * @member {Date} date_created
 */
PaylinkTokenCreated.prototype['date_created'] = undefined;

/**
 * @member {Array.<module:model/PaylinkErrorCode>} errors
 */
PaylinkTokenCreated.prototype['errors'] = undefined;

/**
 * The identifier as presented in the TokenRequest.
 * @member {String} identifier
 */
PaylinkTokenCreated.prototype['identifier'] = undefined;

/**
 * Determines whether the token is `live` or `test`.
 * @member {String} mode
 */
PaylinkTokenCreated.prototype['mode'] = undefined;

/**
 * A URL of a qrcode which can be used to refer to the token URL.
 * @member {String} qrcode
 */
PaylinkTokenCreated.prototype['qrcode'] = undefined;

/**
 * the version of the server performing the call.
 * @member {String} server_version
 */
PaylinkTokenCreated.prototype['server_version'] = undefined;

/**
 * The incoming IP address of the call.
 * @member {String} source
 */
PaylinkTokenCreated.prototype['source'] = undefined;

/**
 * The Paylink token URL used to checkout by the card holder.
 * @member {String} url
 */
PaylinkTokenCreated.prototype['url'] = undefined;

/**
 * A UrlShortCode (USC) used for short links.
 * @member {String} usc
 */
PaylinkTokenCreated.prototype['usc'] = undefined;






export default PaylinkTokenCreated;

