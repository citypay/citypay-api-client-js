/**
 * CityPay Payment API
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DirectTokenAuthRequest model module.
 * @module model/DirectTokenAuthRequest
 */
class DirectTokenAuthRequest {
    /**
     * Constructs a new <code>DirectTokenAuthRequest</code>.
     * @alias module:model/DirectTokenAuthRequest
     */
    constructor() { 
        
        DirectTokenAuthRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DirectTokenAuthRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectTokenAuthRequest} obj Optional instance to populate.
     * @return {module:model/DirectTokenAuthRequest} The populated <code>DirectTokenAuthRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectTokenAuthRequest();

            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('redirect_failure')) {
                obj['redirect_failure'] = ApiClient.convertToType(data['redirect_failure'], 'String');
            }
            if (data.hasOwnProperty('redirect_success')) {
                obj['redirect_success'] = ApiClient.convertToType(data['redirect_success'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectTokenAuthRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectTokenAuthRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }
        // ensure the json data is a string
        if (data['redirect_failure'] && !(typeof data['redirect_failure'] === 'string' || data['redirect_failure'] instanceof String)) {
            throw new Error("Expected the field `redirect_failure` to be a primitive type in the JSON string but got " + data['redirect_failure']);
        }
        // ensure the json data is a string
        if (data['redirect_success'] && !(typeof data['redirect_success'] === 'string' || data['redirect_success'] instanceof String)) {
            throw new Error("Expected the field `redirect_success` to be a primitive type in the JSON string but got " + data['redirect_success']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}



/**
 * A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function. 
 * @member {String} nonce
 */
DirectTokenAuthRequest.prototype['nonce'] = undefined;

/**
 * The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. 
 * @member {String} redirect_failure
 */
DirectTokenAuthRequest.prototype['redirect_failure'] = undefined;

/**
 * The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request. 
 * @member {String} redirect_success
 */
DirectTokenAuthRequest.prototype['redirect_success'] = undefined;

/**
 * The token required to process the transaction as presented by the direct post methodology. 
 * @member {String} token
 */
DirectTokenAuthRequest.prototype['token'] = undefined;






export default DirectTokenAuthRequest;

