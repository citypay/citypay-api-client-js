/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaylinkAddress from './PaylinkAddress';

/**
 * The PaylinkCardHolder model module.
 * @module model/PaylinkCardHolder
 */
class PaylinkCardHolder {
    /**
     * Constructs a new <code>PaylinkCardHolder</code>.
     * @alias module:model/PaylinkCardHolder
     */
    constructor() { 
        
        PaylinkCardHolder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaylinkCardHolder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaylinkCardHolder} obj Optional instance to populate.
     * @return {module:model/PaylinkCardHolder} The populated <code>PaylinkCardHolder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaylinkCardHolder();

            if (data.hasOwnProperty('accept_headers')) {
                obj['accept_headers'] = ApiClient.convertToType(data['accept_headers'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = PaylinkAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('mobile_no')) {
                obj['mobile_no'] = ApiClient.convertToType(data['mobile_no'], 'String');
            }
            if (data.hasOwnProperty('remote_addr')) {
                obj['remote_addr'] = ApiClient.convertToType(data['remote_addr'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('user_agent')) {
                obj['user_agent'] = ApiClient.convertToType(data['user_agent'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The accept headers string generated by the Customer Browser. This field may be used to lock the payment process to the customer's browser. If the customer were to attempt to use a different browser an error will be generated.
 * @member {String} accept_headers
 */
PaylinkCardHolder.prototype['accept_headers'] = undefined;

/**
 * @member {module:model/PaylinkAddress} address
 */
PaylinkCardHolder.prototype['address'] = undefined;

/**
 * The company name for the card holder.
 * @member {String} company
 */
PaylinkCardHolder.prototype['company'] = undefined;

/**
 * The cardholder's email address. This field can be used to send a receipt to the payment cardholder. If this value is not supplied, no email will be sent.
 * @member {String} email
 */
PaylinkCardHolder.prototype['email'] = undefined;

/**
 * The first name of the card holder.
 * @member {String} firstname
 */
PaylinkCardHolder.prototype['firstname'] = undefined;

/**
 * The last name or surname of the card holder.
 * @member {String} lastname
 */
PaylinkCardHolder.prototype['lastname'] = undefined;

/**
 * The mobile number of the cardholder. This can be used for data collection via the Paylink Payment Form or to send an SMS on completion of a transaction. This feature is a licensable option and is not configured by default.
 * @member {String} mobile_no
 */
PaylinkCardHolder.prototype['mobile_no'] = undefined;

/**
 * Specifies the remote IP address of the customer's browser. This field may be used to lock the payment form to the customer's IP address. Should the address change or a malicious third party attempted to hijack the transaction, an error will be generated.
 * @member {String} remote_addr
 */
PaylinkCardHolder.prototype['remote_addr'] = undefined;

/**
 * A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.
 * @member {String} title
 */
PaylinkCardHolder.prototype['title'] = undefined;

/**
 * Specifies the user agent string of the Customer Browser. This field may be used to lock the payment form to the browser. Should a different user agent attempt to process the transaction or a malicious third party attempted to hijack the transaction, an error is generated.
 * @member {String} user_agent
 */
PaylinkCardHolder.prototype['user_agent'] = undefined;






export default PaylinkCardHolder;

