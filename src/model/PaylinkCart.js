/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaylinkCartItemModel from './PaylinkCartItemModel';

/**
 * The PaylinkCart model module.
 * @module model/PaylinkCart
 */
class PaylinkCart {
    /**
     * Constructs a new <code>PaylinkCart</code>.
     * @alias module:model/PaylinkCart
     */
    constructor() { 
        
        PaylinkCart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaylinkCart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaylinkCart} obj Optional instance to populate.
     * @return {module:model/PaylinkCart} The populated <code>PaylinkCart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaylinkCart();

            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], [PaylinkCartItemModel]);
            }
            if (data.hasOwnProperty('coupon')) {
                obj['coupon'] = ApiClient.convertToType(data['coupon'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'Number');
            }
            if (data.hasOwnProperty('product_description')) {
                obj['product_description'] = ApiClient.convertToType(data['product_description'], 'String');
            }
            if (data.hasOwnProperty('product_information')) {
                obj['product_information'] = ApiClient.convertToType(data['product_information'], 'String');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = ApiClient.convertToType(data['shipping'], 'Number');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaylinkCart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaylinkCart</code>.
     */
    static validateJSON(data) {
        if (data['contents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contents'])) {
                throw new Error("Expected the field `contents` to be an array in the JSON data but got " + data['contents']);
            }
            // validate the optional field `contents` (array)
            for (const item of data['contents']) {
                PaylinkCartItemModel.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['coupon'] && !(typeof data['coupon'] === 'string' || data['coupon'] instanceof String)) {
            throw new Error("Expected the field `coupon` to be a primitive type in the JSON string but got " + data['coupon']);
        }
        // ensure the json data is a string
        if (data['product_description'] && !(typeof data['product_description'] === 'string' || data['product_description'] instanceof String)) {
            throw new Error("Expected the field `product_description` to be a primitive type in the JSON string but got " + data['product_description']);
        }
        // ensure the json data is a string
        if (data['product_information'] && !(typeof data['product_information'] === 'string' || data['product_information'] instanceof String)) {
            throw new Error("Expected the field `product_information` to be a primitive type in the JSON string but got " + data['product_information']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/PaylinkCartItemModel>} contents
 */
PaylinkCart.prototype['contents'] = undefined;

/**
 * A coupon redeemed with the transaction.
 * @member {String} coupon
 */
PaylinkCart.prototype['coupon'] = undefined;

/**
 * The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities. 
 * @member {Number} mode
 */
PaylinkCart.prototype['mode'] = undefined;

/**
 * Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.
 * @member {String} product_description
 */
PaylinkCart.prototype['product_description'] = undefined;

/**
 * Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.
 * @member {String} product_information
 */
PaylinkCart.prototype['product_information'] = undefined;

/**
 * The shipping amount of the transaction in the lowest denomination of currency.
 * @member {Number} shipping
 */
PaylinkCart.prototype['shipping'] = undefined;

/**
 * The tax amount of the transaction in the lowest denomination of currency.
 * @member {Number} tax
 */
PaylinkCart.prototype['tax'] = undefined;






export default PaylinkCart;

