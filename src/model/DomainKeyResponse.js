/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DomainKeyResponse model module.
 * @module model/DomainKeyResponse
 */
class DomainKeyResponse {
    /**
     * Constructs a new <code>DomainKeyResponse</code>.
     * @alias module:model/DomainKeyResponse
     * @param domain {Array.<String>} 
     * @param merchantid {Number} The merchant id the domain key is to be used for. 
     */
    constructor(domain, merchantid) { 
        
        DomainKeyResponse.initialize(this, domain, merchantid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domain, merchantid) { 
        obj['domain'] = domain;
        obj['merchantid'] = merchantid;
    }

    /**
     * Constructs a <code>DomainKeyResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainKeyResponse} obj Optional instance to populate.
     * @return {module:model/DomainKeyResponse} The populated <code>DomainKeyResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainKeyResponse();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], ['String']);
            }
            if (data.hasOwnProperty('merchantid')) {
                obj['merchantid'] = ApiClient.convertToType(data['merchantid'], 'Number');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('domain_key')) {
                obj['domain_key'] = ApiClient.convertToType(data['domain_key'], 'String');
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainKeyResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainKeyResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainKeyResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domain'])) {
            throw new Error("Expected the field `domain` to be an array in the JSON data but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['domain_key'] && !(typeof data['domain_key'] === 'string' || data['domain_key'] instanceof String)) {
            throw new Error("Expected the field `domain_key` to be a primitive type in the JSON string but got " + data['domain_key']);
        }

        return true;
    }


}

DomainKeyResponse.RequiredProperties = ["domain", "merchantid"];

/**
 * @member {Array.<String>} domain
 */
DomainKeyResponse.prototype['domain'] = undefined;

/**
 * The merchant id the domain key is to be used for. 
 * @member {Number} merchantid
 */
DomainKeyResponse.prototype['merchantid'] = undefined;

/**
 * The date the domain key was generated. 
 * @member {Date} date_created
 */
DomainKeyResponse.prototype['date_created'] = undefined;

/**
 * The domain key generated. 
 * @member {String} domain_key
 */
DomainKeyResponse.prototype['domain_key'] = undefined;

/**
 * true if this key is a production key. 
 * @member {Boolean} live
 */
DomainKeyResponse.prototype['live'] = undefined;






export default DomainKeyResponse;

