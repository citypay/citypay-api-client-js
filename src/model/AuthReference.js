/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthReference model module.
 * @module model/AuthReference
 * @version 1.0.0
 */
class AuthReference {
    /**
     * Constructs a new <code>AuthReference</code>.
     * @alias module:model/AuthReference
     */
    constructor() { 
        
        AuthReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthReference} obj Optional instance to populate.
     * @return {module:model/AuthReference} The populated <code>AuthReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthReference();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('amount_value')) {
                obj['amount_value'] = ApiClient.convertToType(data['amount_value'], 'Number');
            }
            if (data.hasOwnProperty('atrn')) {
                obj['atrn'] = ApiClient.convertToType(data['atrn'], 'String');
            }
            if (data.hasOwnProperty('authcode')) {
                obj['authcode'] = ApiClient.convertToType(data['authcode'], 'String');
            }
            if (data.hasOwnProperty('batchno')) {
                obj['batchno'] = ApiClient.convertToType(data['batchno'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('datetime')) {
                obj['datetime'] = ApiClient.convertToType(data['datetime'], 'Date');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('maskedpan')) {
                obj['maskedpan'] = ApiClient.convertToType(data['maskedpan'], 'String');
            }
            if (data.hasOwnProperty('merchantid')) {
                obj['merchantid'] = ApiClient.convertToType(data['merchantid'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('trans_status')) {
                obj['trans_status'] = ApiClient.convertToType(data['trans_status'], 'String');
            }
            if (data.hasOwnProperty('trans_type')) {
                obj['trans_type'] = ApiClient.convertToType(data['trans_type'], 'String');
            }
            if (data.hasOwnProperty('transno')) {
                obj['transno'] = ApiClient.convertToType(data['transno'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The amount of the transaction in decimal currency format.
 * @member {String} amount
 */
AuthReference.prototype['amount'] = undefined;

/**
 * The amount of the transaction in integer/request format.
 * @member {Number} amount_value
 */
AuthReference.prototype['amount_value'] = undefined;

/**
 * A reference number provided by the acquiring services.
 * @member {String} atrn
 */
AuthReference.prototype['atrn'] = undefined;

/**
 * The authorisation code of the transaction returned by the acquirer or card issuer.
 * @member {String} authcode
 */
AuthReference.prototype['authcode'] = undefined;

/**
 * A batch number which the transaction has been end of day batched towards.
 * @member {String} batchno
 */
AuthReference.prototype['batchno'] = undefined;

/**
 * The currency of the transaction in ISO 4217 code format.
 * @member {String} currency
 */
AuthReference.prototype['currency'] = undefined;

/**
 * The date and time of the transaction.
 * @member {Date} datetime
 */
AuthReference.prototype['datetime'] = undefined;

/**
 * The identifier of the transaction used to process the transaction.
 * @member {String} identifier
 */
AuthReference.prototype['identifier'] = undefined;

/**
 * A masking of the card number which was used to process the tranasction.
 * @member {String} maskedpan
 */
AuthReference.prototype['maskedpan'] = undefined;

/**
 * The merchant id of the transaction result.
 * @member {Number} merchantid
 */
AuthReference.prototype['merchantid'] = undefined;

/**
 * The result of the transaction.
 * @member {String} result
 */
AuthReference.prototype['result'] = undefined;

/**
 * The current status of the transaction through it's lifecycle.
 * @member {String} trans_status
 */
AuthReference.prototype['trans_status'] = undefined;

/**
 * The type of transaction that was processed.
 * @member {String} trans_type
 */
AuthReference.prototype['trans_type'] = undefined;

/**
 * The transaction number of the transaction.
 * @member {Number} transno
 */
AuthReference.prototype['transno'] = undefined;






export default AuthReference;

