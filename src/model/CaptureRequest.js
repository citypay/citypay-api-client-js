/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirlineAdvice from './AirlineAdvice';
import EventDataModel from './EventDataModel';

/**
 * The CaptureRequest model module.
 * @module model/CaptureRequest
 */
class CaptureRequest {
    /**
     * Constructs a new <code>CaptureRequest</code>.
     * @alias module:model/CaptureRequest
     * @param merchantid {Number} Identifies the merchant account to perform the capture for.
     */
    constructor(merchantid) { 
        
        CaptureRequest.initialize(this, merchantid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, merchantid) { 
        obj['merchantid'] = merchantid;
    }

    /**
     * Constructs a <code>CaptureRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaptureRequest} obj Optional instance to populate.
     * @return {module:model/CaptureRequest} The populated <code>CaptureRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CaptureRequest();

            if (data.hasOwnProperty('merchantid')) {
                obj['merchantid'] = ApiClient.convertToType(data['merchantid'], 'Number');
            }
            if (data.hasOwnProperty('airline_data')) {
                obj['airline_data'] = AirlineAdvice.constructFromObject(data['airline_data']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('event_management')) {
                obj['event_management'] = EventDataModel.constructFromObject(data['event_management']);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('transno')) {
                obj['transno'] = ApiClient.convertToType(data['transno'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaptureRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaptureRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CaptureRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `airline_data`
        if (data['airline_data']) { // data not null
          AirlineAdvice.validateJSON(data['airline_data']);
        }
        // validate the optional field `event_management`
        if (data['event_management']) { // data not null
          EventDataModel.validateJSON(data['event_management']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }

        return true;
    }


}

CaptureRequest.RequiredProperties = ["merchantid"];

/**
 * Identifies the merchant account to perform the capture for.
 * @member {Number} merchantid
 */
CaptureRequest.prototype['merchantid'] = undefined;

/**
 * @member {module:model/AirlineAdvice} airline_data
 */
CaptureRequest.prototype['airline_data'] = undefined;

/**
 * The completion amount provided in the lowest unit of currency for the specific currency of the merchant, with a variable length to a maximum of 12 digits. No decimal points to be included. For example with GBP 75.45 use the value 7545. Please check that you do not supply divisional characters such as 1,024 in the request which may be caused by some number formatters.  If no amount is supplied, the original processing amount is used. 
 * @member {Number} amount
 */
CaptureRequest.prototype['amount'] = undefined;

/**
 * @member {module:model/EventDataModel} event_management
 */
CaptureRequest.prototype['event_management'] = undefined;

/**
 * The identifier of the transaction to capture. If an empty value is supplied then a `trans_no` value must be supplied.
 * @member {String} identifier
 */
CaptureRequest.prototype['identifier'] = undefined;

/**
 * The transaction number of the transaction to look up and capture. If an empty value is supplied then an identifier value must be supplied.
 * @member {Number} transno
 */
CaptureRequest.prototype['transno'] = undefined;






export default CaptureRequest;

