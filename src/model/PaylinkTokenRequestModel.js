/**
 * CityPay Payment API
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaylinkCardHolder from './PaylinkCardHolder';
import PaylinkCart from './PaylinkCart';
import PaylinkConfig from './PaylinkConfig';

/**
 * The PaylinkTokenRequestModel model module.
 * @module model/PaylinkTokenRequestModel
 */
class PaylinkTokenRequestModel {
    /**
     * Constructs a new <code>PaylinkTokenRequestModel</code>.
     * @alias module:model/PaylinkTokenRequestModel
     * @param amount {Number} Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.
     * @param identifier {String} Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. 
     * @param merchantid {Number} The merchant id you wish to process this transaction with.
     */
    constructor(amount, identifier, merchantid) { 
        
        PaylinkTokenRequestModel.initialize(this, amount, identifier, merchantid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, identifier, merchantid) { 
        obj['amount'] = amount;
        obj['identifier'] = identifier;
        obj['merchantid'] = merchantid;
    }

    /**
     * Constructs a <code>PaylinkTokenRequestModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaylinkTokenRequestModel} obj Optional instance to populate.
     * @return {module:model/PaylinkTokenRequestModel} The populated <code>PaylinkTokenRequestModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaylinkTokenRequestModel();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('merchantid')) {
                obj['merchantid'] = ApiClient.convertToType(data['merchantid'], 'Number');
            }
            if (data.hasOwnProperty('accountno')) {
                obj['accountno'] = ApiClient.convertToType(data['accountno'], 'String');
            }
            if (data.hasOwnProperty('cardholder')) {
                obj['cardholder'] = PaylinkCardHolder.constructFromObject(data['cardholder']);
            }
            if (data.hasOwnProperty('cart')) {
                obj['cart'] = PaylinkCart.constructFromObject(data['cart']);
            }
            if (data.hasOwnProperty('client_version')) {
                obj['client_version'] = ApiClient.convertToType(data['client_version'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = PaylinkConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = ApiClient.convertToType(data['recurring'], 'Boolean');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('tx_type')) {
                obj['tx_type'] = ApiClient.convertToType(data['tx_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaylinkTokenRequestModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaylinkTokenRequestModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaylinkTokenRequestModel.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['accountno'] && !(typeof data['accountno'] === 'string' || data['accountno'] instanceof String)) {
            throw new Error("Expected the field `accountno` to be a primitive type in the JSON string but got " + data['accountno']);
        }
        // validate the optional field `cardholder`
        if (data['cardholder']) { // data not null
          PaylinkCardHolder.validateJSON(data['cardholder']);
        }
        // validate the optional field `cart`
        if (data['cart']) { // data not null
          PaylinkCart.validateJSON(data['cart']);
        }
        // ensure the json data is a string
        if (data['client_version'] && !(typeof data['client_version'] === 'string' || data['client_version'] instanceof String)) {
            throw new Error("Expected the field `client_version` to be a primitive type in the JSON string but got " + data['client_version']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          PaylinkConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // ensure the json data is a string
        if (data['tx_type'] && !(typeof data['tx_type'] === 'string' || data['tx_type'] instanceof String)) {
            throw new Error("Expected the field `tx_type` to be a primitive type in the JSON string but got " + data['tx_type']);
        }

        return true;
    }


}

PaylinkTokenRequestModel.RequiredProperties = ["amount", "identifier", "merchantid"];

/**
 * Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.
 * @member {Number} amount
 */
PaylinkTokenRequestModel.prototype['amount'] = undefined;

/**
 * Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. 
 * @member {String} identifier
 */
PaylinkTokenRequestModel.prototype['identifier'] = undefined;

/**
 * The merchant id you wish to process this transaction with.
 * @member {Number} merchantid
 */
PaylinkTokenRequestModel.prototype['merchantid'] = undefined;

/**
 * Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length.
 * @member {String} accountno
 */
PaylinkTokenRequestModel.prototype['accountno'] = undefined;

/**
 * @member {module:model/PaylinkCardHolder} cardholder
 */
PaylinkTokenRequestModel.prototype['cardholder'] = undefined;

/**
 * @member {module:model/PaylinkCart} cart
 */
PaylinkTokenRequestModel.prototype['cart'] = undefined;

/**
 * The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.
 * @member {String} client_version
 */
PaylinkTokenRequestModel.prototype['client_version'] = undefined;

/**
 * @member {module:model/PaylinkConfig} config
 */
PaylinkTokenRequestModel.prototype['config'] = undefined;

/**
 * A currency for the token. This value should be only used on multi-currency accounts and be an appropriate currency which the account is configured for.
 * @member {String} currency
 */
PaylinkTokenRequestModel.prototype['currency'] = undefined;

/**
 * The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. 
 * @member {String} email
 */
PaylinkTokenRequestModel.prototype['email'] = undefined;

/**
 * True if the intent of this cardholder initiated transaction is to establish a recurring payment model, processable as merchant initiated transactions.
 * @member {Boolean} recurring
 */
PaylinkTokenRequestModel.prototype['recurring'] = undefined;

/**
 * an id associated with a subscription to link the token request against.
 * @member {String} subscription_id
 */
PaylinkTokenRequestModel.prototype['subscription_id'] = undefined;

/**
 * A value to override the transaction type if requested by your account manager.
 * @member {String} tx_type
 */
PaylinkTokenRequestModel.prototype['tx_type'] = undefined;






export default PaylinkTokenRequestModel;

