/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Bin model module.
 * @module model/Bin
 */
class Bin {
    /**
     * Constructs a new <code>Bin</code>.
     * @alias module:model/Bin
     */
    constructor() { 
        
        Bin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bin} obj Optional instance to populate.
     * @return {module:model/Bin} The populated <code>Bin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bin();

            if (data.hasOwnProperty('bin_commercial')) {
                obj['bin_commercial'] = ApiClient.convertToType(data['bin_commercial'], 'Boolean');
            }
            if (data.hasOwnProperty('bin_corporate')) {
                obj['bin_corporate'] = ApiClient.convertToType(data['bin_corporate'], 'Boolean');
            }
            if (data.hasOwnProperty('bin_country_issued')) {
                obj['bin_country_issued'] = ApiClient.convertToType(data['bin_country_issued'], 'String');
            }
            if (data.hasOwnProperty('bin_credit')) {
                obj['bin_credit'] = ApiClient.convertToType(data['bin_credit'], 'Boolean');
            }
            if (data.hasOwnProperty('bin_currency')) {
                obj['bin_currency'] = ApiClient.convertToType(data['bin_currency'], 'String');
            }
            if (data.hasOwnProperty('bin_debit')) {
                obj['bin_debit'] = ApiClient.convertToType(data['bin_debit'], 'Boolean');
            }
            if (data.hasOwnProperty('bin_description')) {
                obj['bin_description'] = ApiClient.convertToType(data['bin_description'], 'String');
            }
            if (data.hasOwnProperty('bin_eu')) {
                obj['bin_eu'] = ApiClient.convertToType(data['bin_eu'], 'Boolean');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Defines whether the card is a commercial card.
 * @member {Boolean} bin_commercial
 */
Bin.prototype['bin_commercial'] = undefined;

/**
 * Defines whether the card is a corporate business card.
 * @member {Boolean} bin_corporate
 */
Bin.prototype['bin_corporate'] = undefined;

/**
 * The determined country where the card was issued.
 * @member {String} bin_country_issued
 */
Bin.prototype['bin_country_issued'] = undefined;

/**
 * Defines whether the card is a credit card.
 * @member {Boolean} bin_credit
 */
Bin.prototype['bin_credit'] = undefined;

/**
 * The default currency determined for the card.
 * @member {String} bin_currency
 */
Bin.prototype['bin_currency'] = undefined;

/**
 * Defines whether the card is a debit card.
 * @member {Boolean} bin_debit
 */
Bin.prototype['bin_debit'] = undefined;

/**
 * A description of the bin on the card to identify what type of product the card is.
 * @member {String} bin_description
 */
Bin.prototype['bin_description'] = undefined;

/**
 * Defines whether the card is regulated within the EU.
 * @member {Boolean} bin_eu
 */
Bin.prototype['bin_eu'] = undefined;

/**
 * The scheme that issued the card.
 * @member {String} scheme
 */
Bin.prototype['scheme'] = undefined;






export default Bin;

