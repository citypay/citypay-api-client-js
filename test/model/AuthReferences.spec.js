/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * The version of the OpenAPI document: dev
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.citypay_api_client);
  }
}(this, function(expect, citypay_api_client) {
  'use strict';


  let json = {
    "AuthReferences": {
      "auths": [
        {
          "amount": "0.12",
          "amount_value": 12,
          "atrn": null,
          "authcode": "A12345",
          "batchno": null,
          "currency": "GBP",
          "datetime": "2020-07-21T15:55:04Z",
          "identifier": "TestingAPI",
          "maskedpan": "400000******0000",
          "merchantid": 12345678,
          "result": "Accepted",
          "trans_status": "O",
          "trans_type": "S",
          "transno": 88
        }
      ]
    }}

  var instance1;
  var instance2;

  beforeEach(function() {
    instance1 = new citypay_api_client.ApiClient.instance.deserialize({status: 200, body: json}, citypay_api_client.AuthReferences);
    instance2 = new citypay_api_client.ApiClient.instance.deserialize({status: 200, body: json.AuthReferences}, citypay_api_client.AuthReferences);
  });


  describe('AuthReference', function() {
    it('should create an instance of AuthReference', function() {
      expect(instance1).to.be.a(citypay_api_client.AuthReferences);
      expect(instance2).to.be.a(citypay_api_client.AuthReferences);
    });

    it('should have the property amount (base name: "amount")', function() {
      expect(instance1.auths[0].amount).to.be("0.12"
      );
      expect(instance2.auths[0].amount).to.be("0.12"
      );
    });

    it('should have the property amount_value (base name: "amount_value")', function() {
      expect(instance1.auths[0].amount_value).to.be(12);
      expect(instance2.auths[0].amount_value).to.be(12);
    });

    it('should have the property atrn (base name: "atrn")', function() {
      expect(instance1.auths[0].atrn).to.be(null);
      expect(instance2.auths[0].atrn).to.be(null);
    });

    it('should have the property authcode (base name: "authcode")', function() {
      expect(instance1.auths[0].authcode).to.be("A12345");
      expect(instance2.auths[0].authcode).to.be("A12345");
    });

    it('should have the property batchno (base name: "batchno")', function() {
      expect(instance1.auths[0].batchno).to.be(null);
      expect(instance2.auths[0].batchno).to.be(null);
    });

    it('should have the property currency (base name: "currency")', function() {
      expect(instance1.auths[0].currency).to.be("GBP");
      expect(instance2.auths[0].currency).to.be("GBP");
    });

    it('should have the property datetime (base name: "datetime")', function() {
      expect(instance1.auths[0].datetime.toISOString()).to.be(new Date("2020-07-21T15:55:04Z").toISOString());
      expect(instance2.auths[0].datetime.toISOString()).to.be(new Date("2020-07-21T15:55:04Z").toISOString());
    });

    it('should have the property identifier (base name: "identifier")', function() {
      expect(instance1.auths[0].identifier).to.be("TestingAPI");
      expect(instance2.auths[0].identifier).to.be("TestingAPI");
    });

    it('should have the property maskedpan (base name: "maskedpan")', function() {
      expect(instance1.auths[0].maskedpan).to.be("400000******0000");
      expect(instance2.auths[0].maskedpan).to.be("400000******0000");
    });

    it('should have the property merchantid (base name: "merchantid")', function() {
      expect(instance1.auths[0].merchantid).to.be(12345678);
      expect(instance2.auths[0].merchantid).to.be(12345678);
    });

    it('should have the property result (base name: "result")', function() {
      expect(instance1.auths[0].result).to.be("Accepted");
      expect(instance2.auths[0].result).to.be("Accepted");
    });

    it('should have the property trans_status (base name: "trans_status")', function() {
      expect(instance1.auths[0].trans_status).to.be("O");
      expect(instance2.auths[0].trans_status).to.be("O");
    });

    it('should have the property trans_type (base name: "trans_type")', function() {
      expect(instance1.auths[0].trans_type).to.be("S");
      expect(instance2.auths[0].trans_type).to.be("S");
    });

    it('should have the property transno (base name: "transno")', function() {
      expect(instance1.auths[0].transno).to.be(88);
      expect(instance2.auths[0].transno).to.be(88);
    });

  });


}));
