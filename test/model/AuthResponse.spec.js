/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * The version of the OpenAPI document: dev
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', process.cwd() + '/src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require(process.cwd() + '/src/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.citypay_api_client);
    }
}(this, function (expect, citypay_api_client) {
    'use strict';

    let json = {
        "AuthResponse": {
            "amount": 5500,
            "atrn": "atrn1",
            "atsd": "a",
            "authcode": "12345",
            "authen_result": "R",
            "authorised": true,
            "avs_result": "G",
            "bin_commercial": false,
            "bin_debit": false,
            "bin_description": "bin_desc",
            "cavv": "cavvvvvvvvvvvvv",
            "context": "20200812075906AAAGV4",
            "csc_result": "C",
            "currency": "GBP",
            "datetime": "2020-08-12T07:59:11Z",
            "eci": "0",
            "identifier": "ident1",
            "live": true,
            "maskedpan": "400000******0002",
            "merchantid": 12345,
            "result": 1,
            "result_code": "000",
            "result_message": "System: Accepted Transaction",
            "scheme": "VISA_BUSINESS",
            "sha256": "abcdefg",
            "trans_status": "P",
            "transno": 74875
        }
    }

    let instance;

    beforeEach(function () {
        instance = new citypay_api_client.ApiClient.instance.deserialize({
            status: 200,
            body: json
        }, citypay_api_client.AuthResponse);
    });


    describe('AuthResponse', function () {
        it('should create an instance of AuthResponse', function () {
            expect(instance).to.be.a(citypay_api_client.AuthResponse);
        });

        it('should have the property amount (base name: "amount")', function () {
            expect(instance.amount).to.be(5500);
        });

        it('should have the property atrn (base name: "atrn")', function () {
            expect(instance.atrn).to.be("atrn1");
        });

        it('should have the property atsd (base name: "atsd")', function () {
            expect(instance.atsd).to.be("a");
        });

        it('should have the property authcode (base name: "authcode")', function () {
            expect(instance.authcode).to.be("12345");
        });

        it('should have the property authen_result (base name: "authen_result")', function () {
            expect(instance.authen_result).to.be("R");
        });

        it('should have the property authorised (base name: "authorised")', function () {
            expect(instance.authorised).to.be(true);
        });

        it('should have the property avs_result (base name: "avs_result")', function () {
            expect(instance.avs_result).to.be("G");
        });

        it('should have the property bin_commercial (base name: "bin_commercial")', function () {
            expect(instance.bin_commercial).to.be(false);
        });

        it('should have the property bin_debit (base name: "bin_debit")', function () {
            expect(instance.bin_debit).to.be(false);
        });

        it('should have the property bin_description (base name: "bin_description")', function () {
            expect(instance.bin_description).to.be("bin_desc");
        });

        it('should have the property cavv (base name: "cavv")', function () {
            expect(instance.cavv).to.be("cavvvvvvvvvvvvv");
        });

        it('should have the property context (base name: "context")', function () {
            expect(instance.context).to.be("20200812075906AAAGV4");
        });

        it('should have the property csc_result (base name: "csc_result")', function () {
            expect(instance.csc_result).to.be("C");
        });

        it('should have the property currency (base name: "currency")', function () {
            expect(instance.currency).to.be("GBP");
        });

        it('should have the property datetime (base name: "datetime")', function () {
            expect(instance.datetime.toISOString()).to.be(new Date("2020-08-12T07:59:11Z").toISOString());
        });

        it('should have the property eci (base name: "eci")', function () {
            expect(instance.eci).to.be("0");
        });

        it('should have the property identifier (base name: "identifier")', function () {
            expect(instance.identifier).to.be("ident1");
        });

        it('should have the property live (base name: "live")', function () {
            expect(instance.live).to.be(true);
        });

        it('should have the property maskedpan (base name: "maskedpan")', function () {
            expect(instance.maskedpan).to.be("400000******0002");
        });

        it('should have the property merchantid (base name: "merchantid")', function () {
            expect(instance.merchantid).to.be(12345);
        });

        it('should have the property result (base name: "result")', function () {
            expect(instance.result).to.be(1);
        });

        it('should have the property result_code (base name: "result_code")', function () {
            expect(instance.result_code).to.be("000");
        });

        it('should have the property result_message (base name: "result_message")', function () {
            expect(instance.result_message).to.be("System: Accepted Transaction");
        });

        it('should have the property scheme (base name: "scheme")', function () {
            expect(instance.scheme).to.be("VISA_BUSINESS");
        });

        it('should have the property sha256 (base name: "sha256")', function () {
            expect(instance.sha256).to.be("abcdefg");
        });

        it('should have the property trans_status (base name: "trans_status")', function () {
            expect(instance.trans_status).to.be("P");
        });

        it('should have the property transno (base name: "transno")', function () {
            expect(instance.transno).to.be(74875);
        });

    });

}));
