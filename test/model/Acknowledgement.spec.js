/**
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.citypay_api_client);
  }
}(this, function(expect, citypay_api_client) {
  'use strict';


  let json =
  { "Acknowledgement": {
    "code": "000",
        "context": "1B12WmDZB3EYSbb",
        "identifier": "testIdentifier",
        "message": "System: Accepted Transaction"
  }}

  let instance1;
  let instance2;

  beforeEach(() => {
    instance1 = new citypay_api_client.ApiClient.instance.deserialize({status: 200, body: json}, citypay_api_client.Acknowledgement);
    instance2 = new citypay_api_client.ApiClient.instance.deserialize({status: 200, body: json.Acknowledgement}, citypay_api_client.Acknowledgement);
  })

  describe('Acknowledgement', () => {
    it('should create an instance of Acknowledgement', function() {
      expect(instance1).to.be.a(citypay_api_client.Acknowledgement);
      expect(instance2).to.be.a(citypay_api_client.Acknowledgement);
    });

    it('should have the property code (base name: "code")', function() {
      expect(instance1.code).to.be("000");
      expect(instance2.code).to.be("000");
    });

    it('should have the property context (base name: "context")', function() {
      expect(instance1.context).to.be("1B12WmDZB3EYSbb");
      expect(instance2.context).to.be("1B12WmDZB3EYSbb");
    });

    it('should have the property identifier (base name: "identifier")', function() {
      expect(instance2.identifier).to.be("testIdentifier");
      expect(instance1.identifier).to.be("testIdentifier");
    });

    it('should have the property message (base name: "message")', function() {
      expect(instance1.message).to.be("System: Accepted Transaction");
      expect(instance2.message).to.be("System: Accepted Transaction");
    });

  });

}));
